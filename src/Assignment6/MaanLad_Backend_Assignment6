===================================1.1====================================
package Assignment6;

import java.util.List;

public class First_1 {
    public static void main(String[] args) {
        List<Integer> arrList= List.of(1,2,3,2,3,3,1);
        List <Integer> distinctLst=arrList.stream().distinct().toList();
        System.out.println(distinctLst);
    }
}

===================================1.2====================================
package Assignment6;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class First_2 {
    public static void main(String[] args) {
        Integer[] arr = {19, 12, 31, 40, 34,40};
        List<Integer> arrLst= Arrays.asList(arr);
        List<Integer> newArrLst= arrLst.stream().sorted(Comparator.reverseOrder()).distinct().toList();
        System.out.println(newArrLst);
        System.out.println("The winner is with marks :- "+newArrLst.get(0)+"\nThe runners up with marks :- "+newArrLst.get(1));
    }
}

===================================1.3====================================
package Assignment6;
import java.util.*;
import java.util.stream.Collectors;

public class First_3 {
    public static void main(String[] args) {
        List<Integer> arrList=new ArrayList<Integer>();
        arrList.add(1);
        arrList.add(1);
        arrList.add(2);
        arrList.add(3);
        arrList.add(2);
        arrList.add(3);
        arrList.add(1);
        System.out.println(arrList);
        Map<Integer, Long> map = arrList
                .stream()
                .distinct()
                .collect(Collectors.toMap(entry -> entry, entry -> arrList.stream().filter(entry::equals).count()));
        System.out.println(map);
    }
}
===================================2====================================
package Assignment6;
import java.util.*;


class Student {
    private static final Map<String, Student> studentInstances = new HashMap<>();
    public static List<Student> studentList = new ArrayList<Student>();

    String name;
    int age;
    String grade;

    Student(String name) {
        this.name = name;
    }

    Student(String name, int age, String grade) {
        this.name = name;
        this.age = age;
        this.grade = grade;
    }

    public static void addStudentRecord(Student obj) {
        studentList.add(obj);
        studentInstances.put(obj.name, obj);
    }

    public static OptionalDouble getAverageAge() {
        return studentList.stream().map(s -> s.age).mapToDouble(Integer::doubleValue).average();
    }

    public static Student getInstance(String name) {
        if (studentInstances.containsKey(name)) {
            // Return existing instance if accNo already exists
            return studentInstances.get(name);
        } else {
            // Create a new instance if accNo doesn't exist
            System.out.println("Student with name "+name+" doesn't exists in the record");
            Student newStudentInstance = new Student(name);
            studentInstances.put(name, newStudentInstance);
            return newStudentInstance;
        }
    }

    public static void getSortedList(){
        System.out.println("SORTED LIST OF ALL STUDENTS BY THEIR GRADE");
        List<Student> newStudentList= studentList.stream().sorted(Comparator.comparing(student -> student.grade)).toList();
        newStudentList.forEach(student->{
            System.out.println("Name :- "+student.name+"  Grade :- "+student.grade);
        });
    }

    public void printDetail(){
        System.out.println("THE STUDENTS DATA");
        System.out.println("Name : "+this.name);
        System.out.println("Age : "+this.age);
        System.out.println("Grade : "+this.grade);
    }

}

public class Second {
    public static void main(String[] args) {
        Student std1= new Student("Maan",18,"AB");
        Student std2= new Student("Max",17,"BC");
        Student std3= new Student("Arson",18,"CC");
        Student std4= new Student("Jin",16,"BA");

        //Adding new student instances
        Student.addStudentRecord(std1);
        Student.addStudentRecord(std2);
        Student.addStudentRecord(std3);
        Student.addStudentRecord(std4);

        //Average age method of class
        System.out.println("Average age :- "+Student.getAverageAge().getAsDouble());

        //Find student by their name
        System.out.println();
        Student fStudent=Student.getInstance("Maan");
        fStudent.printDetail();

        //Sorted student by their grade
        System.out.println();
        Student.getSortedList();
    }
}

===================================3====================================
package Assignment6;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Third {

    public static List<Integer> generateFib(int num){
        return Stream.iterate(new int[]{0,1},s->new int[]{s[1],s[0]+s[1]}).limit(num).map(n->n[0]).collect(Collectors.toList());
    }

    public static void main(String[] args) {
        System.out.println(generateFib(10));
    }
}
===================================4====================================
package Assignment6;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class Fourth {
    public static void main(String[] args) {
        String sampleSqlQuery="select * from student";
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn= DriverManager.getConnection("jdbc:mysql://localhost:3306/students","root","");
            if(conn!=null){
                System.out.println("Database is connected");
                Statement st=conn.createStatement();
                ResultSet rs=st.executeQuery(sampleSqlQuery);
                while(rs.next()){
                    System.out.print(rs.getInt(1)+"\t");
                    System.out.print(rs.getString(2)+"\t");
                }
            }

        }
        catch(Exception e){
            System.out.println(e.toString());
            System.out.println("Not connected");
        }
    }
}


=============================1==========================
package Assignment7;

public class First implements Runnable{
    @Override
    public void run() {
        System.out.println("Run by implementing runnable interface run method");
    }
    public static void main(String[] args) {
            Runnable r1=new First();
            Thread th1=new Thread(r1);
            th1.start();
    }

}
=============================2==========================
package Assignment7;

public class Second extends Thread{

    @Override
    public void run() {
        super.run();
        System.out.println("Run by overriding thread class");
    }

    public static void main(String[] args) {
        Thread th1=new Second();
        th1.start();
    }
}
=============================3==========================
package Assignment7;


public class Third implements Runnable{
    @Override
    public void run() {
        try{
            System.out.println("Thread "+Thread.currentThread().getName()+" started");
            for (int i = 0; i < 3; i++) {
                Thread.sleep(1000);
                System.out.println("Thread " +Thread.currentThread().getName()+" is running "+i);
            }
            System.out.println("Thread "+Thread.currentThread().getName()+" ended");
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) {
        //Multiple threads of main thread
        Thread th1=new Thread(new Third());
        Thread th2=new Thread(new Third());
        th1.start();
        th2.start();
        System.out.println("Main method ended");
    }

}
=============================4==========================
package Assignment7;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Fourth{
    public static void main(String[] args) {
        ExecutorService executorService= Executors.newFixedThreadPool(3);
        for (int i = 0; i < 10; i++) {
            Runnable worker=new WorkerThread(""+i);
            executorService.execute(worker);
        }
        executorService.shutdown();
        while(!executorService.isTerminated()){}
        System.out.println("All threads are terminated");
    }
}

class WorkerThread implements Runnable{
    String message;
    WorkerThread(String message){
        this.message =message;
    }
    @Override
    public void run() {
        System.out.println(Thread.currentThread().getName()+" thread started worker:"+this.message);
        threadTask();
        System.out.println(Thread.currentThread().getName()+" thread ended");
    }

    private void threadTask(){
        try {
            Thread.sleep(1000);
        }catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
=============================5==========================
package Assignment7;

public class Fifth {
    public static void main(String[] args)  {
        Thread th1=new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println("Running thread 1");
            }
        });
        Thread th2=new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(1000);
                    System.out.println("Thread 2 started");
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        th1.start();
        th2.start();
        System.out.println("Main method ended");
    }
}